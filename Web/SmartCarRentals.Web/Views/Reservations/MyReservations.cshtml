@using SmartCarRentals.Common
@using SmartCarRentals.Data.Models.Enums.Reservation
@model SmartCarRentals.Web.ViewModels.Main.Reservations.MyReservationsAllViewModelCollection
@{
    this.ViewData["Title"] = "My Reservations";
    string navImgUrl = "https://res.cloudinary.com/dp70enihl/image/upload/v1583615677/SmartCarRentalsPics/Background/bg_3_dt2wuw.jpg";
}

<section class="hero-wrap hero-wrap-2 js-fullheight" style="background-image: url('@navImgUrl');" data-stellar-background-ratio="0.5">
    <div class="overlay"></div>
    <div class="container">
        <div class="row no-gutters slider-text js-fullheight align-items-end justify-content-start">
            <div class="col-md-9 ftco-animate pb-5">
                <p class="breadcrumbs"><span class="mr-2"><a asp-area="Identity" asp-page="/Account/Manage/Index">My info <i class="fas fa-greater-than"></i></a></span> <span>@this.ViewData["Title"] <i class="fas fa-greater-than"></i></span></p>
                <h1 class="mb-3 bread">@this.ViewData["Title"]</h1>
            </div>
        </div>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <table class="table table-striped table-hover">
                <thead class="table-head-fixed tab">
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Reservation Id</th>
                        <th scope="col">Car</th>
                        <th scope="col">Car Plate Number</th>
                        <th scope="col">For Date</th>
                        <th scope="col">Parking</th>
                        <th scope="col">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < @Model.MyReservations.Count; i++)
                    {
                        <tr>
                            <th class="align-middle" scope="row">@(i + 1)</th>
                            <th class="align-middle" scope="row">@Model.MyReservations[i].Id</th>
                            <td class="align-middle">@Model.MyReservations[i].Car.Make @Model.MyReservations[i].Car.Model</td>
                            <td class="align-middle">@Model.MyReservations[i].Car.PlateNumber</td>
                            <td class="align-middle">@Model.MyReservations[i].ReservationDate.ToString("dd-MM-yyyy")</td>
                            <td class="align-middle">@Model.MyReservations[i].Parking.Town.Name, @Model.MyReservations[i].Parking.Address</td>
                            <td class="align-middle">
                                @Model.MyReservations[i].Status
                                @if (Model.MyReservations[i].ReservationDate.Date.CompareTo(DateTime.UtcNow.Date) == 0 && Model.MyReservations[i].Status == Status.Awaiting)
                                {
                                    <form method="post">
                                        <button type="submit" class="btn btn-primary py-1 px-1" asp-area="" asp-controller="Trips" asp-action="Create"  asp-route-id="@Model.MyReservations[i].CarId">Rent Now</button>
                                    </form>
                                }
                                else if (Model.MyReservations[i].Status == Status.Awaiting)
                                {
                                    <form method="post">
                                        <button type="submit" class="btn btn-primary py-1 px-1"  asp-area="" asp-controller="Reservations" asp-action="Cancel" asp-route-id="@Model.MyReservations[i].Id">Cancel</button>
                                    </form>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="row mt-5">
            <div class="col text-center">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        @if (this.Model.CurrentPage == 1)
                        {
                            <li class="page-item disabled">
                                <a class="page-link" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                    <span class="sr-only">Previous</span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" aria-label="Previous" asp-route="default" asp-route-id="@(this.Model.CurrentPage - 1)">
                                    <span aria-hidden="true">&laquo;</span>
                                    <span class="sr-only">Previous</span>
                                </a>
                            </li>
                        }

                        @{
                            var pagesToShow = new List<int>();
                            for (var i = 1; i <= GlobalConstants.MorePagesToShow; i++)
                            {
                                pagesToShow.Add(i);
                            }
                            for (var i = this.Model.CurrentPage - GlobalConstants.MorePagesToShow; i <= this.Model.CurrentPage + GlobalConstants.MorePagesToShow; i++)
                            {
                                if (i > 0)
                                {
                                    pagesToShow.Add(i);
                                }
                            }
                            for (var i = this.Model.PagesCount - GlobalConstants.MorePagesToShow + 1; i <= this.Model.PagesCount; i++)
                            {
                                if (i > 0)
                                {
                                    pagesToShow.Add(i);
                                }
                            }
                            pagesToShow = pagesToShow.Where(x => x <= this.Model.PagesCount).Distinct().OrderBy(x => x).ToList();
                        }
                        @for (var i = 0; i < pagesToShow.Count; i++)
                        {
                            var pageNumber = pagesToShow[i];
                            var active = pagesToShow[i] == this.Model.CurrentPage ? "active" : string.Empty;
                            if (i > 0 && pageNumber - 1 != pagesToShow[i - 1])
                            {
                                <li class="page-item @active"><a class="page-link" asp-route="default" asp-route-id="@(pagesToShow[i - 1] + 1)">...</a></li>
                            }
                            <li class="page-item @active"><a class="page-link" asp-route="default" asp-route-id="@pagesToShow[i]">@pagesToShow[i]</a></li>
                        }

                        @if (this.Model.CurrentPage == this.Model.PagesCount)
                        {
                            <li class="page-item disabled">
                                <a class="page-link" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" aria-label="Next" asp-route="default" asp-route-id="@(this.Model.CurrentPage + 1)">
                                    <span aria-hidden="true">&raquo;</span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</section>
